{"version":3,"sources":["components/DetailedDayContainer.tsx","components/DayContainer.tsx","components/ErrorModal.tsx","components/LoaderModal.tsx","components/WeekContainer.tsx","components/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DetailedDayContainer","props","dayName","dayData","time","onClose","tod","className","Button","onClick","useState","React","DayContainer","nightData","showDetail","setShowDetail","name","detail","setDetail","altIcon","getMonthandDay","dayWeather","d","Date","startTime","day","getDate","monthNum","getMonth","handleDetailClick","key","e","detailedForecast","determineIcon","weather","env","window","location","href","includes","map","i","src","shortForecast","alt","temperature","windSpeed","variant","n","ErrorModal","open","msg","handleClose","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","LoaderModal","CircularProgress","size","useEffect","WeekContainer","fullWeather","dailyStartWeather","dailyEndWeather","error","errorMsg","loading","setWeather","a","fetch","res1","json","data","nextURL","properties","forecast","res2","finalData","periods","arrSort","arr","sort","b","dateA","dateB","console","log","length","tmpArrA","tmpArrB","forEach","push","splitDailyData","retrieveWeatherData","useStyles","makeStyles","appBar","backgroundColor","justifyContent","searchBar","posiiton","marginRight","marginLeft","search","color","Header","classes","AppBar","Toolbar","Typography","InputBase","placeholder","startAdornment","Search","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7afe1466.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Button } from '@material-ui/core';\n\ninterface Props {\n  dayName: string,\n  dayData: string,\n  time: string,\n  onClose: () => void,\n}\n\nexport default function DetailedDayContainer(props: Props){\n  const { dayName, dayData, time, onClose } = props;\n  let tod = \"\";\n\n  if (time === \"night\") {\n    tod = \"Evening\";\n  }\n\n  return (\n    <>\n      <div className=\"Detail-modal-background\">\n        <div className=\"Detail-modal\">\n          <h1>Detailed Forecast for {dayName} {tod}</h1>\n          <p>{dayData}</p>\n          <Button onClick={onClose}>Close</Button>\n        </div>\n      </div>\n    </>\n  )\n}","import * as React from 'react';\nimport { Button } from '@material-ui/core';\nimport DetailedDayContainer from './DetailedDayContainer';\nimport DailyWeather from './Day';\n\nconst { useState } = React;\n\ninterface Props {\n  dayData: DailyWeather[],\n  nightData: DailyWeather[],\n}\n\nfunction DayContainer(props: Props) {\n  const { dayData, nightData } = props;  \n  const [showDetail, setShowDetail] = useState(false);\n  const [detail, setDetail] = useState({\n    name: '',\n    detail: '',\n    time: '',\n  });\n  let altIcon = \"Weather Icon\";\n    \n  function getMonthandDay(dayWeather: DailyWeather) {\n    const d = new Date(dayWeather.startTime);\n    const day = d.getDate();\n    const monthNum = d.getMonth();\n    const monthsInYear = [\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\n    ];\n    const monthName = monthsInYear[monthNum];\n    const date = `${monthName} ${day}`;\n    return date;\n  }\n\n  function handleDetailClick(key: number, e: any, time: string) {\n    setShowDetail(true);\n\n    if (time === \"day\") {\n      setDetail({\n        name: getMonthandDay(dayData[key]),\n        detail: dayData[key].detailedForecast,\n        time: \"day\",\n      });\n    }\n\n    if (time === \"night\") {\n      setDetail({\n        name: getMonthandDay(nightData[key]),\n        detail: nightData[key].detailedForecast,\n        time: \"night\",\n      });\n    }\n  }\n\n  function handleDetailClose() {\n    setShowDetail(false);\n  }\n\n  function determineIcon(weather: string, time: string) {\n    const env = window.location.href.includes(\"local\") ? \"./weather-app\" : \".\"; \n    if (weather.includes(\"Snow\")) {\n      altIcon = \"Snowflake Icon\";\n      return `${env}/snowflake.svg`;\n    }\n    if (weather.includes(\"Rain\") || weather.includes(\"Drizzle\") || weather.includes(\"Showers\")) {\n      altIcon = \"Raindrop Icon\";\n      return `${env}/rain.svg`;\n    }\n    if (weather.includes(\"Sunny\")) {\n      if (weather.includes(\"Partly\")) {\n        altIcon = \"Sun With Clouds Icon\";\n        return `${env}/partly_cloudy.svg`;\n      }\n      altIcon = \"Sun Icon\";\n      return `${env}/sun.svg`;\n    }\n    if (weather.includes(\"Cloudy\")) {\n      if (weather.includes(\"Partly\") && time === \"day\") {\n        altIcon = \"Sun With Clouds Icon\";\n        return `${env}/partly_cloudy.svg`;\n      }\n      if (weather.includes(\"Partly\") && time === \"night\") {\n        altIcon = \"Moon WIth Clouds Icon\"\n        return `${env}/moon_cloudy.svg`;\n      }\n      altIcon = \"Cloud Icon\";\n      return `${env}/cloud.svg`;\n    }\n    if (weather.includes(\"Clear\")) {\n      if (time === \"day\") {\n        altIcon = \"Sun Icon\";\n        return `${env}/sun.svg`;\n      }\n      if (time === \"night\") {\n        altIcon = \"Moon Icon\";\n        return `${env}/moon.svg`;\n      }\n    }\n    if (weather.includes(\"Sleet\")) {\n      altIcon = \"Sleet Icon\";\n      return `${env}/sleet.svg`;\n    }\n  }\n\n  return (\n    <>\n      {dayData.map((d: DailyWeather, i: number) => (\n        <div key={i} className=\"Week-item\">\n          <h2 className=\"Day-header\">\n            {d.name}\n            <br/>\n            {getMonthandDay(d)}\n          </h2>\n          <img\n            className=\"Icons\"\n            src={determineIcon(d.shortForecast, \"day\")}\n            alt={altIcon}\n          />\n          <h3>{d.shortForecast}</h3>\n          <h4 className=\"Day-item\">Temp: {d.temperature}°F</h4>\n          <h4>Wind Speed: {d.windSpeed}</h4>\n          \n          <Button\n            variant=\"contained\"\n            onClick={(e) => handleDetailClick(i, e, \"day\")}\n          >\n            Detailed Forecast\n          </Button>\n        </div>\n      ))}\n\n      {nightData.map((n: DailyWeather, i: number) => (\n      <div key={i} className=\"Week-item\">\n        <h2 className=\"Day-header\">\n          {n.name}\n          <br />\n          {getMonthandDay(n)}\n        </h2>\n        <img\n          className=\"Icons\"\n          src={determineIcon(n.shortForecast, \"night\")}\n          alt={altIcon}\n        />\n        <h4 className=\"Day-item\">{n.shortForecast}</h4>\n        <h4 className=\"Day-item\">Temp: {n.temperature}°F</h4>\n        <h4>Wind Speed: {n.windSpeed}</h4>\n        \n        <Button\n          variant=\"contained\"\n          onClick={(e) => handleDetailClick(i, e, \"night\")}\n        >\n          Detailed Forecast\n        </Button>\n      </div>\n      ))}\n\n      {showDetail && (\n        <DetailedDayContainer\n          dayName={detail.name}\n          dayData={detail.detail}\n          time={detail.time}\n          onClose={handleDetailClose}\n        />\n      )}\n    </>\n  )\n}\n\nexport default DayContainer;\n","import * as React from 'react';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n} from '@material-ui/core';\n\ninterface Props {\n  open: boolean,\n  msg: string,\n  handleClose: () => void,\n}\n\nexport default function ErrorModal(props: Props) {\n  const { open, msg, handleClose } = props;\n  return (\n    <>\n      <Dialog open={open}>\n        <DialogTitle>\n          Unexpected Error\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {msg}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n","import * as React from 'react';\nimport {\n  CircularProgress,\n  Dialog,\n  DialogContent,\n  DialogContentText,\n} from '@material-ui/core';\n\ninterface Props {\n  msg: string,\n  open: boolean,\n}\n\nexport default function LoaderModal(props: Props) {\n  const { msg, open } = props;\n  return (\n    <>\n      <Dialog open={open}>\n        <DialogContent>\n          <DialogContentText>\n            {msg}\n            <CircularProgress size={20} />\n          </DialogContentText>\n        </DialogContent>\n      </Dialog>\n    </>\n  )\n}\n","import * as React from 'react';\nimport DayContainer from './DayContainer';\nimport ErrorModal from './ErrorModal';\nimport LoaderModal from './LoaderModal';\n\nconst { useEffect, useState } = React;\n\nfunction WeekContainer() {\n  const [weather, setWeather] = useState({\n    fullWeather: [],\n    dailyStartWeather: [] as any[],\n    dailyEndWeather: [] as any[],\n    error: false,\n    errorMsg: 'We\\'re sorry, the weather API\\'s server is temporarily down. Please try again later',\n    loading: true,\n  });\n\n  async function retrieveWeatherData() {\n    setWeather({\n      ...weather,\n      loading: true,\n    });\n    \n    const weatherURL = 'https://api.weather.gov/points/40.71427,-74.00597'\n    const res1 = await fetch(weatherURL);\n    // if (res1.status === 200) {\n    if (res1) {\n      const data = await res1.json();\n      if (data) {\n        const nextURL = data.properties.forecast;\n        const res2 = await fetch(nextURL);\n\n        // if (res2.status === 200) {\n        if (res2) {\n          const finalData = await res2.json();\n          if (finalData) {\n            setWeather({\n              ...weather,\n              fullWeather: finalData.properties.periods,\n              loading: false,\n            });\n            return;\n          }\n        }\n      }\n\n      setWeather({\n        ...weather,\n        error: true,\n        loading: false,\n      });\n    }\n  }\n  console.log(weather);\n\n  function arrSort(arr: any[]) {\n    arr.sort((a, b) => {\n      let dateA = new Date(a.startTime);\n      let dateB = new Date(b.startTime);\n      if (dateA > dateB) {\n        return 1;\n      }\n      if (dateA < dateB) {\n        return -1;\n      }\n      return 0;\n    })\n    return arr;\n  }\n\n  function splitDailyData() {\n    let tmpArrA = [] as any[];\n    let tmpArrB = [] as any[];\n    weather.fullWeather.forEach((forecast: any) => {\n      if (forecast.startTime.includes('18:00:00')) {\n        tmpArrB.push(forecast);\n      } else {\n        tmpArrA.push(forecast);\n      }\n    });\n\n    setWeather({\n      ...weather,\n      dailyStartWeather: arrSort(tmpArrA),\n      dailyEndWeather: arrSort(tmpArrB),\n      loading: false,\n    });\n  }\n\n  function handleErrorClose() {\n    setWeather({\n      ...weather,\n      error: false,\n      errorMsg: '',\n    });\n  }\n\n  useEffect(() => {\n    if (weather.fullWeather.length === 0) {\n      retrieveWeatherData();\n      return;\n    }\n    if (weather.dailyStartWeather.length === 0) {\n      splitDailyData();\n    }\n  \n    // * Force error test\n    // setWeather({\n    //   ...weather,\n    //   error: true,\n    //   errorMsg: 'Sorry, a problem occurred trying to load the weather data. Please refresh the page to try again.',\n    // });\n\n    // * Force loader test\n    // setWeather({\n    //   ...weather,\n    //   loading: true,\n    // });\n  }, [weather.fullWeather.length]);\n\n  return (\n    <>\n      <LoaderModal msg=\"Loading Weather Data...\" open={weather.loading} />\n\n      <h1 className=\"Week-header\">7 Day Forecast for NYC</h1>\n      \n      <div className=\"Week-container\">        \n        <DayContainer\n          dayData={weather.dailyStartWeather}\n          nightData={weather.dailyEndWeather}\n        />\n        <ErrorModal\n          open={weather.error}\n          msg={weather.errorMsg}\n          handleClose={handleErrorClose}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default WeekContainer;","import * as React from 'react';\nimport {\n  AppBar,\n  InputBase,\n  Toolbar,\n  Typography,\n  makeStyles,\n} from '@material-ui/core';\nimport { Search } from '@material-ui/icons';\n\nconst useStyles = makeStyles(() => ({\n  appBar: {\n    backgroundColor: '#282c34',\n    justifyContent: 'space-between',\n  },\n  searchBar: {\n    posiiton: 'relative',\n    marginRight: 0,\n    marginLeft: 'auto',\n  },\n  search: {\n    color: '#fff',\n  },\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n  return (\n    <>\n      <AppBar className={classes.appBar}>\n        <Toolbar>\n          <Typography>\n            Weather Forecast\n          </Typography>\n          <div className={classes.searchBar}>\n            <InputBase\n              className={classes.search} \n              placeholder=\"Coming eventually...\"\n              startAdornment={<Search />}\n            />\n          </div>\n        </Toolbar>\n      </AppBar>\n    </>\n  )\n}","import React from 'react';\nimport './App.css';\nimport WeekContainer from './components/WeekContainer';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <WeekContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}